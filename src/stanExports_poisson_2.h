// Generated by rstantools.  Do not edit by hand.

/*
    footstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    footstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with footstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_poisson_2_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'poisson_2', line 18, column 2 to column 14)",
                                                      " (in 'poisson_2', line 19, column 2 to column 12)",
                                                      " (in 'poisson_2', line 20, column 2 to column 23)",
                                                      " (in 'poisson_2', line 21, column 2 to column 23)",
                                                      " (in 'poisson_2', line 22, column 2 to column 23)",
                                                      " (in 'poisson_2', line 23, column 2 to column 23)",
                                                      " (in 'poisson_2', line 24, column 2 to column 25)",
                                                      " (in 'poisson_2', line 25, column 2 to column 25)",
                                                      " (in 'poisson_2', line 26, column 2 to column 25)",
                                                      " (in 'poisson_2', line 27, column 2 to column 25)",
                                                      " (in 'poisson_2', line 50, column 2 to column 22)",
                                                      " (in 'poisson_2', line 51, column 2 to column 22)",
                                                      " (in 'poisson_2', line 52, column 2 to column 25)",
                                                      " (in 'poisson_2', line 54, column 4 to column 76)",
                                                      " (in 'poisson_2', line 55, column 4 to column 69)",
                                                      " (in 'poisson_2', line 57, column 4 to line 58, column 78)",
                                                      " (in 'poisson_2', line 53, column 22 to line 59, column 3)",
                                                      " (in 'poisson_2', line 53, column 2 to line 59, column 3)",
                                                      " (in 'poisson_2', line 31, column 4 to column 67)",
                                                      " (in 'poisson_2', line 32, column 4 to column 60)",
                                                      " (in 'poisson_2', line 30, column 22 to line 33, column 3)",
                                                      " (in 'poisson_2', line 30, column 2 to line 33, column 3)",
                                                      " (in 'poisson_2', line 34, column 2 to column 40)",
                                                      " (in 'poisson_2', line 35, column 2 to column 34)",
                                                      " (in 'poisson_2', line 36, column 2 to column 47)",
                                                      " (in 'poisson_2', line 37, column 2 to column 47)",
                                                      " (in 'poisson_2', line 39, column 2 to column 47)",
                                                      " (in 'poisson_2', line 40, column 2 to column 47)",
                                                      " (in 'poisson_2', line 43, column 2 to column 37)",
                                                      " (in 'poisson_2', line 44, column 2 to column 37)",
                                                      " (in 'poisson_2', line 46, column 2 to column 37)",
                                                      " (in 'poisson_2', line 47, column 2 to column 37)",
                                                      " (in 'poisson_2', line 2, column 2 to column 22)",
                                                      " (in 'poisson_2', line 3, column 2 to column 22)",
                                                      " (in 'poisson_2', line 4, column 8 to column 14)",
                                                      " (in 'poisson_2', line 4, column 2 to column 16)",
                                                      " (in 'poisson_2', line 5, column 8 to column 14)",
                                                      " (in 'poisson_2', line 5, column 2 to column 16)",
                                                      " (in 'poisson_2', line 6, column 9 to column 15)",
                                                      " (in 'poisson_2', line 6, column 2 to column 17)",
                                                      " (in 'poisson_2', line 7, column 9 to column 15)",
                                                      " (in 'poisson_2', line 7, column 2 to column 17)",
                                                      " (in 'poisson_2', line 8, column 2 to column 17)",
                                                      " (in 'poisson_2', line 8, column 18 to column 42)",
                                                      " (in 'poisson_2', line 9, column 2 to column 15)",
                                                      " (in 'poisson_2', line 9, column 16 to column 38)",
                                                      " (in 'poisson_2', line 11, column 2 to column 16)",
                                                      " (in 'poisson_2', line 11, column 17 to column 34)",
                                                      " (in 'poisson_2', line 11, column 35 to column 53)",
                                                      " (in 'poisson_2', line 12, column 2 to column 16)",
                                                      " (in 'poisson_2', line 12, column 17 to column 34)",
                                                      " (in 'poisson_2', line 12, column 35 to column 53)",
                                                      " (in 'poisson_2', line 14, column 2 to column 16)",
                                                      " (in 'poisson_2', line 14, column 17 to column 34)",
                                                      " (in 'poisson_2', line 14, column 35 to column 53)",
                                                      " (in 'poisson_2', line 15, column 2 to column 16)",
                                                      " (in 'poisson_2', line 15, column 17 to column 34)",
                                                      " (in 'poisson_2', line 15, column 35 to column 53)",
                                                      " (in 'poisson_2', line 20, column 9 to column 15)",
                                                      " (in 'poisson_2', line 21, column 9 to column 15)",
                                                      " (in 'poisson_2', line 22, column 9 to column 15)",
                                                      " (in 'poisson_2', line 23, column 9 to column 15)",
                                                      " (in 'poisson_2', line 50, column 14 to column 20)",
                                                      " (in 'poisson_2', line 51, column 14 to column 20)",
                                                      " (in 'poisson_2', line 52, column 9 to column 15)"};
#include <stan_meta_header.hpp>
class model_poisson_2 final : public model_base_crtp<model_poisson_2> {
private:
  int ngames;
  int nteams;
  std::vector<int> h;
  std::vector<int> a;
  std::vector<int> y1;
  std::vector<int> y2;
  double beta_0_mu;
  double beta_0_sd;
  double home_mu;
  double home_sd;
  double att_h_mu;
  double sd_att_h_mu;
  double sd_att_h_sig;
  double att_a_mu;
  double sd_att_a_mu;
  double sd_att_a_sig;
  double def_h_mu;
  double sd_def_h_mu;
  double sd_def_h_sig;
  double def_a_mu;
  double sd_def_a_mu;
  double sd_def_a_sig;
 
public:
  ~model_poisson_2() { }
  
  inline std::string model_name() const final { return "model_poisson_2"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_poisson_2(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_poisson_2_namespace::model_poisson_2";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","ngames","int",
          context__.to_vec());
      ngames = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      ngames = context__.vals_i("ngames")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "ngames", ngames, 1);
      current_statement__ = 34;
      context__.validate_dims("data initialization","nteams","int",
          context__.to_vec());
      nteams = std::numeric_limits<int>::min();
      
      current_statement__ = 34;
      nteams = context__.vals_i("nteams")[(1 - 1)];
      current_statement__ = 34;
      current_statement__ = 34;
      check_greater_or_equal(function__, "nteams", nteams, 1);
      current_statement__ = 35;
      validate_non_negative_index("h", "ngames", ngames);
      current_statement__ = 36;
      context__.validate_dims("data initialization","h","int",
          context__.to_vec(ngames));
      h = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      current_statement__ = 36;
      assign(h, nil_index_list(), context__.vals_i("h"),
        "assigning variable h");
      current_statement__ = 37;
      validate_non_negative_index("a", "ngames", ngames);
      current_statement__ = 38;
      context__.validate_dims("data initialization","a","int",
          context__.to_vec(ngames));
      a = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      current_statement__ = 38;
      assign(a, nil_index_list(), context__.vals_i("a"),
        "assigning variable a");
      current_statement__ = 39;
      validate_non_negative_index("y1", "ngames", ngames);
      current_statement__ = 40;
      context__.validate_dims("data initialization","y1","int",
          context__.to_vec(ngames));
      y1 = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      current_statement__ = 40;
      assign(y1, nil_index_list(), context__.vals_i("y1"),
        "assigning variable y1");
      current_statement__ = 41;
      validate_non_negative_index("y2", "ngames", ngames);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y2","int",
          context__.to_vec(ngames));
      y2 = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      current_statement__ = 42;
      assign(y2, nil_index_list(), context__.vals_i("y2"),
        "assigning variable y2");
      current_statement__ = 43;
      context__.validate_dims("data initialization","beta_0_mu","double",
          context__.to_vec());
      beta_0_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      beta_0_mu = context__.vals_r("beta_0_mu")[(1 - 1)];
      current_statement__ = 44;
      context__.validate_dims("data initialization","beta_0_sd","double",
          context__.to_vec());
      beta_0_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 44;
      beta_0_sd = context__.vals_r("beta_0_sd")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "beta_0_sd", beta_0_sd, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","home_mu","double",
          context__.to_vec());
      home_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      home_mu = context__.vals_r("home_mu")[(1 - 1)];
      current_statement__ = 46;
      context__.validate_dims("data initialization","home_sd","double",
          context__.to_vec());
      home_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      home_sd = context__.vals_r("home_sd")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "home_sd", home_sd, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization","att_h_mu","double",
          context__.to_vec());
      att_h_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      att_h_mu = context__.vals_r("att_h_mu")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization","sd_att_h_mu","double",
          context__.to_vec());
      sd_att_h_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      sd_att_h_mu = context__.vals_r("sd_att_h_mu")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization","sd_att_h_sig","double",
          context__.to_vec());
      sd_att_h_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      sd_att_h_sig = context__.vals_r("sd_att_h_sig")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","att_a_mu","double",
          context__.to_vec());
      att_a_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      att_a_mu = context__.vals_r("att_a_mu")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization","sd_att_a_mu","double",
          context__.to_vec());
      sd_att_a_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      sd_att_a_mu = context__.vals_r("sd_att_a_mu")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","sd_att_a_sig","double",
          context__.to_vec());
      sd_att_a_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      sd_att_a_sig = context__.vals_r("sd_att_a_sig")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","def_h_mu","double",
          context__.to_vec());
      def_h_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      def_h_mu = context__.vals_r("def_h_mu")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization","sd_def_h_mu","double",
          context__.to_vec());
      sd_def_h_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      sd_def_h_mu = context__.vals_r("sd_def_h_mu")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization","sd_def_h_sig","double",
          context__.to_vec());
      sd_def_h_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      sd_def_h_sig = context__.vals_r("sd_def_h_sig")[(1 - 1)];
      current_statement__ = 56;
      context__.validate_dims("data initialization","def_a_mu","double",
          context__.to_vec());
      def_a_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 56;
      def_a_mu = context__.vals_r("def_a_mu")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization","sd_def_a_mu","double",
          context__.to_vec());
      sd_def_a_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 57;
      sd_def_a_mu = context__.vals_r("sd_def_a_mu")[(1 - 1)];
      current_statement__ = 58;
      context__.validate_dims("data initialization","sd_def_a_sig","double",
          context__.to_vec());
      sd_def_a_sig = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 58;
      sd_def_a_sig = context__.vals_r("sd_def_a_sig")[(1 - 1)];
      current_statement__ = 59;
      validate_non_negative_index("att_h", "nteams", nteams);
      current_statement__ = 60;
      validate_non_negative_index("att_a", "nteams", nteams);
      current_statement__ = 61;
      validate_non_negative_index("def_h", "nteams", nteams);
      current_statement__ = 62;
      validate_non_negative_index("def_a", "nteams", nteams);
      current_statement__ = 63;
      validate_non_negative_index("y1_pred", "ngames", ngames);
      current_statement__ = 64;
      validate_non_negative_index("y2_pred", "ngames", ngames);
      current_statement__ = 65;
      validate_non_negative_index("log_lik", "ngames", ngames);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += nteams;
      num_params_r__ += nteams;
      num_params_r__ += nteams;
      num_params_r__ += nteams;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_poisson_2_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ beta_0;
      beta_0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      beta_0 = in__.scalar();
      local_scalar_t__ home;
      home = DUMMY_VAR__;
      
      current_statement__ = 2;
      home = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> att_h;
      att_h = Eigen::Matrix<local_scalar_t__, -1, 1>(nteams);
      stan::math::fill(att_h, DUMMY_VAR__);
      
      current_statement__ = 3;
      att_h = in__.vector(nteams);
      Eigen::Matrix<local_scalar_t__, -1, 1> att_a;
      att_a = Eigen::Matrix<local_scalar_t__, -1, 1>(nteams);
      stan::math::fill(att_a, DUMMY_VAR__);
      
      current_statement__ = 4;
      att_a = in__.vector(nteams);
      Eigen::Matrix<local_scalar_t__, -1, 1> def_h;
      def_h = Eigen::Matrix<local_scalar_t__, -1, 1>(nteams);
      stan::math::fill(def_h, DUMMY_VAR__);
      
      current_statement__ = 5;
      def_h = in__.vector(nteams);
      Eigen::Matrix<local_scalar_t__, -1, 1> def_a;
      def_a = Eigen::Matrix<local_scalar_t__, -1, 1>(nteams);
      stan::math::fill(def_a, DUMMY_VAR__);
      
      current_statement__ = 6;
      def_a = in__.vector(nteams);
      local_scalar_t__ sd_att_h;
      sd_att_h = DUMMY_VAR__;
      
      current_statement__ = 7;
      sd_att_h = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sd_att_h = stan::math::lb_constrain(sd_att_h, 0, lp__);
      } else {
        current_statement__ = 7;
        sd_att_h = stan::math::lb_constrain(sd_att_h, 0);
      }
      local_scalar_t__ sd_att_a;
      sd_att_a = DUMMY_VAR__;
      
      current_statement__ = 8;
      sd_att_a = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sd_att_a = stan::math::lb_constrain(sd_att_a, 0, lp__);
      } else {
        current_statement__ = 8;
        sd_att_a = stan::math::lb_constrain(sd_att_a, 0);
      }
      local_scalar_t__ sd_def_h;
      sd_def_h = DUMMY_VAR__;
      
      current_statement__ = 9;
      sd_def_h = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sd_def_h = stan::math::lb_constrain(sd_def_h, 0, lp__);
      } else {
        current_statement__ = 9;
        sd_def_h = stan::math::lb_constrain(sd_def_h, 0);
      }
      local_scalar_t__ sd_def_a;
      sd_def_a = DUMMY_VAR__;
      
      current_statement__ = 10;
      sd_def_a = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sd_def_a = stan::math::lb_constrain(sd_def_a, 0, lp__);
      } else {
        current_statement__ = 10;
        sd_def_a = stan::math::lb_constrain(sd_def_a, 0);
      }
      {
        current_statement__ = 22;
        for (int g = 1; g <= ngames; ++g) {
          current_statement__ = 19;
          lp_accum__.add(
            poisson_log_lpmf<propto__>(y1[(g - 1)],
              (((beta_0 + home) + att_h[(h[(g - 1)] - 1)]) +
                def_a[(a[(g - 1)] - 1)])));
          current_statement__ = 20;
          lp_accum__.add(
            poisson_log_lpmf<propto__>(y2[(g - 1)],
              ((beta_0 + att_a[(a[(g - 1)] - 1)]) + def_h[(h[(g - 1)] - 1)])));
        }
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(beta_0, beta_0_mu, beta_0_sd));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(home, home_mu, home_sd));
        current_statement__ = 25;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_att_h, sd_att_h_mu, sd_att_h_sig));
        current_statement__ = 26;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_att_a, sd_att_a_mu, sd_att_a_sig));
        current_statement__ = 27;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_def_h, sd_def_h_mu, sd_def_h_sig));
        current_statement__ = 28;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_def_a, sd_def_a_mu, sd_def_a_sig));
        current_statement__ = 29;
        lp_accum__.add(normal_lpdf<propto__>(att_h, att_h_mu, sd_att_h));
        current_statement__ = 30;
        lp_accum__.add(normal_lpdf<propto__>(att_a, att_a_mu, sd_att_a));
        current_statement__ = 31;
        lp_accum__.add(normal_lpdf<propto__>(def_h, def_h_mu, sd_def_h));
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(def_a, def_a_mu, sd_def_a));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_poisson_2_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double beta_0;
      beta_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta_0 = in__.scalar();
      double home;
      home = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      home = in__.scalar();
      Eigen::Matrix<double, -1, 1> att_h;
      att_h = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(att_h, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      att_h = in__.vector(nteams);
      Eigen::Matrix<double, -1, 1> att_a;
      att_a = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(att_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      att_a = in__.vector(nteams);
      Eigen::Matrix<double, -1, 1> def_h;
      def_h = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(def_h, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      def_h = in__.vector(nteams);
      Eigen::Matrix<double, -1, 1> def_a;
      def_a = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(def_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      def_a = in__.vector(nteams);
      double sd_att_h;
      sd_att_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_att_h = in__.scalar();
      current_statement__ = 7;
      sd_att_h = stan::math::lb_constrain(sd_att_h, 0);
      double sd_att_a;
      sd_att_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_att_a = in__.scalar();
      current_statement__ = 8;
      sd_att_a = stan::math::lb_constrain(sd_att_a, 0);
      double sd_def_h;
      sd_def_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sd_def_h = in__.scalar();
      current_statement__ = 9;
      sd_def_h = stan::math::lb_constrain(sd_def_h, 0);
      double sd_def_a;
      sd_def_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sd_def_a = in__.scalar();
      current_statement__ = 10;
      sd_def_a = stan::math::lb_constrain(sd_def_a, 0);
      vars__.emplace_back(beta_0);
      vars__.emplace_back(home);
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(att_h[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(att_a[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(def_h[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(def_a[(sym1__ - 1)]);}
      vars__.emplace_back(sd_att_h);
      vars__.emplace_back(sd_att_a);
      vars__.emplace_back(sd_def_h);
      vars__.emplace_back(sd_def_a);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> y1_pred;
      y1_pred = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      std::vector<int> y2_pred;
      y2_pred = std::vector<int>(ngames, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(ngames);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      for (int g = 1; g <= ngames; ++g) {
        current_statement__ = 14;
        assign(y1_pred, cons_list(index_uni(g), nil_index_list()),
          poisson_log_rng(
            (((beta_0 + home) + att_h[(h[(g - 1)] - 1)]) +
              def_a[(a[(g - 1)] - 1)]), base_rng__),
          "assigning variable y1_pred");
        current_statement__ = 15;
        assign(y2_pred, cons_list(index_uni(g), nil_index_list()),
          poisson_log_rng(
            ((beta_0 + att_a[(a[(g - 1)] - 1)]) + def_h[(h[(g - 1)] - 1)]),
            base_rng__), "assigning variable y2_pred");
        current_statement__ = 16;
        assign(log_lik, cons_list(index_uni(g), nil_index_list()),
          (poisson_log_lpmf<false>(y1[(g - 1)],
             (((beta_0 + home) + att_h[(h[(g - 1)] - 1)]) +
               def_a[(a[(g - 1)] - 1)])) +
            poisson_log_lpmf<false>(y2[(g - 1)],
              ((beta_0 + att_a[(a[(g - 1)] - 1)]) + def_h[(h[(g - 1)] - 1)]))),
          "assigning variable log_lik");}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        vars__.emplace_back(y1_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        vars__.emplace_back(y2_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double beta_0;
      beta_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta_0 = context__.vals_r("beta_0")[(1 - 1)];
      double home;
      home = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      home = context__.vals_r("home")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> att_h;
      att_h = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(att_h, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> att_h_flat__;
        current_statement__ = 3;
        assign(att_h_flat__, nil_index_list(), context__.vals_r("att_h"),
          "assigning variable att_h_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 3;
          assign(att_h, cons_list(index_uni(sym1__), nil_index_list()),
            att_h_flat__[(pos__ - 1)], "assigning variable att_h");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> att_a;
      att_a = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(att_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> att_a_flat__;
        current_statement__ = 4;
        assign(att_a_flat__, nil_index_list(), context__.vals_r("att_a"),
          "assigning variable att_a_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 4;
          assign(att_a, cons_list(index_uni(sym1__), nil_index_list()),
            att_a_flat__[(pos__ - 1)], "assigning variable att_a");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> def_h;
      def_h = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(def_h, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> def_h_flat__;
        current_statement__ = 5;
        assign(def_h_flat__, nil_index_list(), context__.vals_r("def_h"),
          "assigning variable def_h_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 5;
          assign(def_h, cons_list(index_uni(sym1__), nil_index_list()),
            def_h_flat__[(pos__ - 1)], "assigning variable def_h");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> def_a;
      def_a = Eigen::Matrix<double, -1, 1>(nteams);
      stan::math::fill(def_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> def_a_flat__;
        current_statement__ = 6;
        assign(def_a_flat__, nil_index_list(), context__.vals_r("def_a"),
          "assigning variable def_a_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 6;
          assign(def_a, cons_list(index_uni(sym1__), nil_index_list()),
            def_a_flat__[(pos__ - 1)], "assigning variable def_a");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      double sd_att_h;
      sd_att_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_att_h = context__.vals_r("sd_att_h")[(1 - 1)];
      double sd_att_h_free__;
      sd_att_h_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_att_h_free__ = stan::math::lb_free(sd_att_h, 0);
      double sd_att_a;
      sd_att_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_att_a = context__.vals_r("sd_att_a")[(1 - 1)];
      double sd_att_a_free__;
      sd_att_a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_att_a_free__ = stan::math::lb_free(sd_att_a, 0);
      double sd_def_h;
      sd_def_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sd_def_h = context__.vals_r("sd_def_h")[(1 - 1)];
      double sd_def_h_free__;
      sd_def_h_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sd_def_h_free__ = stan::math::lb_free(sd_def_h, 0);
      double sd_def_a;
      sd_def_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sd_def_a = context__.vals_r("sd_def_a")[(1 - 1)];
      double sd_def_a_free__;
      sd_def_a_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sd_def_a_free__ = stan::math::lb_free(sd_def_a, 0);
      vars__.emplace_back(beta_0);
      vars__.emplace_back(home);
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(att_h[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(att_a[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(def_h[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
        vars__.emplace_back(def_a[(sym1__ - 1)]);}
      vars__.emplace_back(sd_att_h_free__);
      vars__.emplace_back(sd_att_a_free__);
      vars__.emplace_back(sd_def_h_free__);
      vars__.emplace_back(sd_def_a_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta_0");
    names__.emplace_back("home");
    names__.emplace_back("att_h");
    names__.emplace_back("att_a");
    names__.emplace_back("def_h");
    names__.emplace_back("def_a");
    names__.emplace_back("sd_att_h");
    names__.emplace_back("sd_att_a");
    names__.emplace_back("sd_def_h");
    names__.emplace_back("sd_def_a");
    names__.emplace_back("y1_pred");
    names__.emplace_back("y2_pred");
    names__.emplace_back("log_lik");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nteams)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nteams)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nteams)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(nteams)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ngames)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ngames)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ngames)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "home");
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "att_h" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "att_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "def_h" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "def_a" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_att_h");
    param_names__.emplace_back(std::string() + "sd_att_a");
    param_names__.emplace_back(std::string() + "sd_def_h");
    param_names__.emplace_back(std::string() + "sd_def_a");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "home");
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "att_h" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "att_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "def_h" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "def_a" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_att_h");
    param_names__.emplace_back(std::string() + "sd_att_a");
    param_names__.emplace_back(std::string() + "sd_def_h");
    param_names__.emplace_back(std::string() + "sd_def_a");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att_h\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"att_a\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"def_h\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"def_a\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"sd_att_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_att_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_pred\",\"type\":{\"name\":\"array\",\"length\":" << ngames << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_pred\",\"type\":{\"name\":\"array\",\"length\":" << ngames << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << ngames << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att_h\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"att_a\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"def_h\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"def_a\",\"type\":{\"name\":\"vector\",\"length\":" << nteams << "},\"block\":\"parameters\"},{\"name\":\"sd_att_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_att_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_pred\",\"type\":{\"name\":\"array\",\"length\":" << ngames << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_pred\",\"type\":{\"name\":\"array\",\"length\":" << ngames << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << ngames << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_poisson_2_namespace::model_poisson_2;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_poisson_2_namespace::profiles__;
}
#endif
#endif

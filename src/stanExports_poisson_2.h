// Generated by rstantools.  Do not edit by hand.

/*
    footstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    footstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with footstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_poisson_2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 66> locations_array__ =
  {" (found before start of program)",
  " (in 'poisson_2', line 18, column 2 to column 14)",
  " (in 'poisson_2', line 19, column 2 to column 12)",
  " (in 'poisson_2', line 20, column 2 to column 23)",
  " (in 'poisson_2', line 21, column 2 to column 23)",
  " (in 'poisson_2', line 22, column 2 to column 23)",
  " (in 'poisson_2', line 23, column 2 to column 23)",
  " (in 'poisson_2', line 24, column 2 to column 25)",
  " (in 'poisson_2', line 25, column 2 to column 25)",
  " (in 'poisson_2', line 26, column 2 to column 25)",
  " (in 'poisson_2', line 27, column 2 to column 25)",
  " (in 'poisson_2', line 50, column 2 to column 22)",
  " (in 'poisson_2', line 51, column 2 to column 22)",
  " (in 'poisson_2', line 52, column 2 to column 25)",
  " (in 'poisson_2', line 54, column 4 to column 76)",
  " (in 'poisson_2', line 55, column 4 to column 69)",
  " (in 'poisson_2', line 57, column 4 to line 58, column 78)",
  " (in 'poisson_2', line 53, column 22 to line 59, column 3)",
  " (in 'poisson_2', line 53, column 2 to line 59, column 3)",
  " (in 'poisson_2', line 31, column 4 to column 67)",
  " (in 'poisson_2', line 32, column 4 to column 60)",
  " (in 'poisson_2', line 30, column 22 to line 33, column 3)",
  " (in 'poisson_2', line 30, column 2 to line 33, column 3)",
  " (in 'poisson_2', line 34, column 2 to column 40)",
  " (in 'poisson_2', line 35, column 2 to column 34)",
  " (in 'poisson_2', line 36, column 2 to column 47)",
  " (in 'poisson_2', line 37, column 2 to column 47)",
  " (in 'poisson_2', line 39, column 2 to column 47)",
  " (in 'poisson_2', line 40, column 2 to column 47)",
  " (in 'poisson_2', line 43, column 2 to column 37)",
  " (in 'poisson_2', line 44, column 2 to column 37)",
  " (in 'poisson_2', line 46, column 2 to column 37)",
  " (in 'poisson_2', line 47, column 2 to column 37)",
  " (in 'poisson_2', line 2, column 2 to column 22)",
  " (in 'poisson_2', line 3, column 2 to column 22)",
  " (in 'poisson_2', line 4, column 8 to column 14)",
  " (in 'poisson_2', line 4, column 2 to column 16)",
  " (in 'poisson_2', line 5, column 8 to column 14)",
  " (in 'poisson_2', line 5, column 2 to column 16)",
  " (in 'poisson_2', line 6, column 9 to column 15)",
  " (in 'poisson_2', line 6, column 2 to column 17)",
  " (in 'poisson_2', line 7, column 9 to column 15)",
  " (in 'poisson_2', line 7, column 2 to column 17)",
  " (in 'poisson_2', line 8, column 2 to column 17)",
  " (in 'poisson_2', line 8, column 18 to column 42)",
  " (in 'poisson_2', line 9, column 2 to column 15)",
  " (in 'poisson_2', line 9, column 16 to column 38)",
  " (in 'poisson_2', line 11, column 2 to column 16)",
  " (in 'poisson_2', line 11, column 17 to column 34)",
  " (in 'poisson_2', line 11, column 35 to column 53)",
  " (in 'poisson_2', line 12, column 2 to column 16)",
  " (in 'poisson_2', line 12, column 17 to column 34)",
  " (in 'poisson_2', line 12, column 35 to column 53)",
  " (in 'poisson_2', line 14, column 2 to column 16)",
  " (in 'poisson_2', line 14, column 17 to column 34)",
  " (in 'poisson_2', line 14, column 35 to column 53)",
  " (in 'poisson_2', line 15, column 2 to column 16)",
  " (in 'poisson_2', line 15, column 17 to column 34)",
  " (in 'poisson_2', line 15, column 35 to column 53)",
  " (in 'poisson_2', line 20, column 9 to column 15)",
  " (in 'poisson_2', line 21, column 9 to column 15)",
  " (in 'poisson_2', line 22, column 9 to column 15)",
  " (in 'poisson_2', line 23, column 9 to column 15)",
  " (in 'poisson_2', line 50, column 14 to column 20)",
  " (in 'poisson_2', line 51, column 14 to column 20)",
  " (in 'poisson_2', line 52, column 9 to column 15)"};
#include <stan_meta_header.hpp>
class model_poisson_2 final : public model_base_crtp<model_poisson_2> {
private:
  int ngames;
  int nteams;
  std::vector<int> h;
  std::vector<int> a;
  std::vector<int> y1;
  std::vector<int> y2;
  double beta_0_mu;
  double beta_0_sd;
  double home_mu;
  double home_sd;
  double att_h_mu;
  double sd_att_h_mu;
  double sd_att_h_sig;
  double att_a_mu;
  double sd_att_a_mu;
  double sd_att_a_sig;
  double def_h_mu;
  double sd_def_h_mu;
  double sd_def_h_sig;
  double def_a_mu;
  double sd_def_a_mu;
  double sd_def_a_sig;
public:
  ~model_poisson_2() {}
  model_poisson_2(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_poisson_2_namespace::model_poisson_2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization", "ngames", "int",
        std::vector<size_t>{});
      ngames = std::numeric_limits<int>::min();
      current_statement__ = 33;
      ngames = context__.vals_i("ngames")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "ngames", ngames, 1);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "nteams", "int",
        std::vector<size_t>{});
      nteams = std::numeric_limits<int>::min();
      current_statement__ = 34;
      nteams = context__.vals_i("nteams")[(1 - 1)];
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "nteams", nteams, 1);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("h", "ngames", ngames);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "h", "int",
        std::vector<size_t>{static_cast<size_t>(ngames)});
      h = std::vector<int>(ngames, std::numeric_limits<int>::min());
      current_statement__ = 36;
      h = context__.vals_i("h");
      current_statement__ = 37;
      stan::math::validate_non_negative_index("a", "ngames", ngames);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "a", "int",
        std::vector<size_t>{static_cast<size_t>(ngames)});
      a = std::vector<int>(ngames, std::numeric_limits<int>::min());
      current_statement__ = 38;
      a = context__.vals_i("a");
      current_statement__ = 39;
      stan::math::validate_non_negative_index("y1", "ngames", ngames);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "y1", "int",
        std::vector<size_t>{static_cast<size_t>(ngames)});
      y1 = std::vector<int>(ngames, std::numeric_limits<int>::min());
      current_statement__ = 40;
      y1 = context__.vals_i("y1");
      current_statement__ = 41;
      stan::math::validate_non_negative_index("y2", "ngames", ngames);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "y2", "int",
        std::vector<size_t>{static_cast<size_t>(ngames)});
      y2 = std::vector<int>(ngames, std::numeric_limits<int>::min());
      current_statement__ = 42;
      y2 = context__.vals_i("y2");
      current_statement__ = 43;
      context__.validate_dims("data initialization", "beta_0_mu", "double",
        std::vector<size_t>{});
      beta_0_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 43;
      beta_0_mu = context__.vals_r("beta_0_mu")[(1 - 1)];
      current_statement__ = 44;
      context__.validate_dims("data initialization", "beta_0_sd", "double",
        std::vector<size_t>{});
      beta_0_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      beta_0_sd = context__.vals_r("beta_0_sd")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "beta_0_sd", beta_0_sd,
        0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "home_mu", "double",
        std::vector<size_t>{});
      home_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      home_mu = context__.vals_r("home_mu")[(1 - 1)];
      current_statement__ = 46;
      context__.validate_dims("data initialization", "home_sd", "double",
        std::vector<size_t>{});
      home_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      home_sd = context__.vals_r("home_sd")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "home_sd", home_sd, 0);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "att_h_mu", "double",
        std::vector<size_t>{});
      att_h_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 47;
      att_h_mu = context__.vals_r("att_h_mu")[(1 - 1)];
      current_statement__ = 48;
      context__.validate_dims("data initialization", "sd_att_h_mu", "double",
        std::vector<size_t>{});
      sd_att_h_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      sd_att_h_mu = context__.vals_r("sd_att_h_mu")[(1 - 1)];
      current_statement__ = 49;
      context__.validate_dims("data initialization", "sd_att_h_sig",
        "double", std::vector<size_t>{});
      sd_att_h_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      sd_att_h_sig = context__.vals_r("sd_att_h_sig")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization", "att_a_mu", "double",
        std::vector<size_t>{});
      att_a_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      att_a_mu = context__.vals_r("att_a_mu")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization", "sd_att_a_mu", "double",
        std::vector<size_t>{});
      sd_att_a_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 51;
      sd_att_a_mu = context__.vals_r("sd_att_a_mu")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization", "sd_att_a_sig",
        "double", std::vector<size_t>{});
      sd_att_a_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 52;
      sd_att_a_sig = context__.vals_r("sd_att_a_sig")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization", "def_h_mu", "double",
        std::vector<size_t>{});
      def_h_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 53;
      def_h_mu = context__.vals_r("def_h_mu")[(1 - 1)];
      current_statement__ = 54;
      context__.validate_dims("data initialization", "sd_def_h_mu", "double",
        std::vector<size_t>{});
      sd_def_h_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 54;
      sd_def_h_mu = context__.vals_r("sd_def_h_mu")[(1 - 1)];
      current_statement__ = 55;
      context__.validate_dims("data initialization", "sd_def_h_sig",
        "double", std::vector<size_t>{});
      sd_def_h_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 55;
      sd_def_h_sig = context__.vals_r("sd_def_h_sig")[(1 - 1)];
      current_statement__ = 56;
      context__.validate_dims("data initialization", "def_a_mu", "double",
        std::vector<size_t>{});
      def_a_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 56;
      def_a_mu = context__.vals_r("def_a_mu")[(1 - 1)];
      current_statement__ = 57;
      context__.validate_dims("data initialization", "sd_def_a_mu", "double",
        std::vector<size_t>{});
      sd_def_a_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 57;
      sd_def_a_mu = context__.vals_r("sd_def_a_mu")[(1 - 1)];
      current_statement__ = 58;
      context__.validate_dims("data initialization", "sd_def_a_sig",
        "double", std::vector<size_t>{});
      sd_def_a_sig = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 58;
      sd_def_a_sig = context__.vals_r("sd_def_a_sig")[(1 - 1)];
      current_statement__ = 59;
      stan::math::validate_non_negative_index("att_h", "nteams", nteams);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("att_a", "nteams", nteams);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("def_h", "nteams", nteams);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("def_a", "nteams", nteams);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("y1_pred", "ngames", ngames);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("y2_pred", "ngames", ngames);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("log_lik", "ngames", ngames);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + nteams + nteams + nteams + nteams + 1 + 1 + 1 +
      1;
  }
  inline std::string model_name() const final {
    return "model_poisson_2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_poisson_2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 2;
      home = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> att_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 3;
      att_h = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<local_scalar_t__,-1,1> att_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 4;
      att_a = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<local_scalar_t__,-1,1> def_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 5;
      def_h = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<local_scalar_t__,-1,1> def_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 6;
      def_a = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      local_scalar_t__ sd_att_h = DUMMY_VAR__;
      current_statement__ = 7;
      sd_att_h = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_att_a = DUMMY_VAR__;
      current_statement__ = 8;
      sd_att_a = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_def_h = DUMMY_VAR__;
      current_statement__ = 9;
      sd_def_h = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_def_a = DUMMY_VAR__;
      current_statement__ = 10;
      sd_def_a = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      {
        current_statement__ = 22;
        for (int g = 1; g <= ngames; ++g) {
          current_statement__ = 19;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                           stan::model::rvalue(y1, "y1",
                             stan::model::index_uni(g)), (((beta_0 + home) +
                           stan::model::rvalue(att_h, "att_h",
                             stan::model::index_uni(
                               stan::model::rvalue(h, "h",
                                 stan::model::index_uni(g))))) +
                           stan::model::rvalue(def_a, "def_a",
                             stan::model::index_uni(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(g)))))));
          current_statement__ = 20;
          lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                           stan::model::rvalue(y2, "y2",
                             stan::model::index_uni(g)), ((beta_0 +
                           stan::model::rvalue(att_a, "att_a",
                             stan::model::index_uni(
                               stan::model::rvalue(a, "a",
                                 stan::model::index_uni(g))))) +
                           stan::model::rvalue(def_h, "def_h",
                             stan::model::index_uni(
                               stan::model::rvalue(h, "h",
                                 stan::model::index_uni(g)))))));
        }
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_0, beta_0_mu,
                         beta_0_sd));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(home, home_mu,
                         home_sd));
        current_statement__ = 25;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sd_att_h,
                         sd_att_h_mu, sd_att_h_sig));
        current_statement__ = 26;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sd_att_a,
                         sd_att_a_mu, sd_att_a_sig));
        current_statement__ = 27;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sd_def_h,
                         sd_def_h_mu, sd_def_h_sig));
        current_statement__ = 28;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sd_def_a,
                         sd_def_a_mu, sd_def_a_sig));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(att_h, att_h_mu,
                         sd_att_h));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(att_a, att_a_mu,
                         sd_att_a));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(def_h, def_h_mu,
                         sd_def_h));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(def_a, def_a_mu,
                         sd_def_a));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_poisson_2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double beta_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      beta_0 = in__.template read<local_scalar_t__>();
      double home = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      home = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> att_h =
        Eigen::Matrix<double,-1,1>::Constant(nteams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      att_h = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<double,-1,1> att_a =
        Eigen::Matrix<double,-1,1>::Constant(nteams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      att_a = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<double,-1,1> def_h =
        Eigen::Matrix<double,-1,1>::Constant(nteams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      def_h = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      Eigen::Matrix<double,-1,1> def_a =
        Eigen::Matrix<double,-1,1>::Constant(nteams,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      def_a = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(nteams);
      double sd_att_h = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sd_att_h = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sd_att_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sd_att_a = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sd_def_h = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sd_def_h = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sd_def_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_def_a = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      out__.write(beta_0);
      out__.write(home);
      out__.write(att_h);
      out__.write(att_a);
      out__.write(def_h);
      out__.write(def_a);
      out__.write(sd_att_h);
      out__.write(sd_att_a);
      out__.write(sd_def_h);
      out__.write(sd_def_a);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> y1_pred =
        std::vector<int>(ngames, std::numeric_limits<int>::min());
      std::vector<int> y2_pred =
        std::vector<int>(ngames, std::numeric_limits<int>::min());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(ngames,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      for (int g = 1; g <= ngames; ++g) {
        current_statement__ = 14;
        stan::model::assign(y1_pred,
          stan::math::poisson_log_rng((((beta_0 + home) +
            stan::model::rvalue(att_h, "att_h",
              stan::model::index_uni(
                stan::model::rvalue(h, "h", stan::model::index_uni(g))))) +
            stan::model::rvalue(def_a, "def_a",
              stan::model::index_uni(
                stan::model::rvalue(a, "a", stan::model::index_uni(g))))),
            base_rng__), "assigning variable y1_pred",
          stan::model::index_uni(g));
        current_statement__ = 15;
        stan::model::assign(y2_pred,
          stan::math::poisson_log_rng(((beta_0 +
            stan::model::rvalue(att_a, "att_a",
              stan::model::index_uni(
                stan::model::rvalue(a, "a", stan::model::index_uni(g))))) +
            stan::model::rvalue(def_h, "def_h",
              stan::model::index_uni(
                stan::model::rvalue(h, "h", stan::model::index_uni(g))))),
            base_rng__), "assigning variable y2_pred",
          stan::model::index_uni(g));
        current_statement__ = 16;
        stan::model::assign(log_lik,
          (stan::math::poisson_log_lpmf<false>(
             stan::model::rvalue(y1, "y1", stan::model::index_uni(g)),
             (((beta_0 + home) +
             stan::model::rvalue(att_h, "att_h",
               stan::model::index_uni(
                 stan::model::rvalue(h, "h", stan::model::index_uni(g))))) +
             stan::model::rvalue(def_a, "def_a",
               stan::model::index_uni(
                 stan::model::rvalue(a, "a", stan::model::index_uni(g)))))) +
          stan::math::poisson_log_lpmf<false>(
            stan::model::rvalue(y2, "y2", stan::model::index_uni(g)),
            ((beta_0 +
            stan::model::rvalue(att_a, "att_a",
              stan::model::index_uni(
                stan::model::rvalue(a, "a", stan::model::index_uni(g))))) +
            stan::model::rvalue(def_h, "def_h",
              stan::model::index_uni(
                stan::model::rvalue(h, "h", stan::model::index_uni(g))))))),
          "assigning variable log_lik", stan::model::index_uni(g));
      }
      out__.write(y1_pred);
      out__.write(y2_pred);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = in__.read<local_scalar_t__>();
      out__.write(beta_0);
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 2;
      home = in__.read<local_scalar_t__>();
      out__.write(home);
      Eigen::Matrix<local_scalar_t__,-1,1> att_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(att_h,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nteams),
        "assigning variable att_h");
      out__.write(att_h);
      Eigen::Matrix<local_scalar_t__,-1,1> att_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(att_a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nteams),
        "assigning variable att_a");
      out__.write(att_a);
      Eigen::Matrix<local_scalar_t__,-1,1> def_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(def_h,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nteams),
        "assigning variable def_h");
      out__.write(def_h);
      Eigen::Matrix<local_scalar_t__,-1,1> def_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(def_a,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nteams),
        "assigning variable def_a");
      out__.write(def_a);
      local_scalar_t__ sd_att_h = DUMMY_VAR__;
      current_statement__ = 7;
      sd_att_h = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_att_h);
      local_scalar_t__ sd_att_a = DUMMY_VAR__;
      current_statement__ = 8;
      sd_att_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_att_a);
      local_scalar_t__ sd_def_h = DUMMY_VAR__;
      current_statement__ = 9;
      sd_def_h = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_def_h);
      local_scalar_t__ sd_def_a = DUMMY_VAR__;
      current_statement__ = 10;
      sd_def_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_def_a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "home", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "att_h", "double",
        std::vector<size_t>{static_cast<size_t>(nteams)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "att_a", "double",
        std::vector<size_t>{static_cast<size_t>(nteams)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "def_h", "double",
        std::vector<size_t>{static_cast<size_t>(nteams)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "def_a", "double",
        std::vector<size_t>{static_cast<size_t>(nteams)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sd_att_h",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sd_att_a",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "sd_def_h",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sd_def_a",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ beta_0 = DUMMY_VAR__;
      current_statement__ = 1;
      beta_0 = context__.vals_r("beta_0")[(1 - 1)];
      out__.write(beta_0);
      local_scalar_t__ home = DUMMY_VAR__;
      current_statement__ = 2;
      home = context__.vals_r("home")[(1 - 1)];
      out__.write(home);
      Eigen::Matrix<local_scalar_t__,-1,1> att_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> att_h_flat__;
        current_statement__ = 3;
        att_h_flat__ = context__.vals_r("att_h");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(att_h, att_h_flat__[(pos__ - 1)],
            "assigning variable att_h", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(att_h);
      Eigen::Matrix<local_scalar_t__,-1,1> att_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> att_a_flat__;
        current_statement__ = 4;
        att_a_flat__ = context__.vals_r("att_a");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(att_a, att_a_flat__[(pos__ - 1)],
            "assigning variable att_a", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(att_a);
      Eigen::Matrix<local_scalar_t__,-1,1> def_h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> def_h_flat__;
        current_statement__ = 5;
        def_h_flat__ = context__.vals_r("def_h");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(def_h, def_h_flat__[(pos__ - 1)],
            "assigning variable def_h", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(def_h);
      Eigen::Matrix<local_scalar_t__,-1,1> def_a =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nteams, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> def_a_flat__;
        current_statement__ = 6;
        def_a_flat__ = context__.vals_r("def_a");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(def_a, def_a_flat__[(pos__ - 1)],
            "assigning variable def_a", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(def_a);
      local_scalar_t__ sd_att_h = DUMMY_VAR__;
      current_statement__ = 7;
      sd_att_h = context__.vals_r("sd_att_h")[(1 - 1)];
      out__.write_free_lb(0, sd_att_h);
      local_scalar_t__ sd_att_a = DUMMY_VAR__;
      current_statement__ = 8;
      sd_att_a = context__.vals_r("sd_att_a")[(1 - 1)];
      out__.write_free_lb(0, sd_att_a);
      local_scalar_t__ sd_def_h = DUMMY_VAR__;
      current_statement__ = 9;
      sd_def_h = context__.vals_r("sd_def_h")[(1 - 1)];
      out__.write_free_lb(0, sd_def_h);
      local_scalar_t__ sd_def_a = DUMMY_VAR__;
      current_statement__ = 10;
      sd_def_a = context__.vals_r("sd_def_a")[(1 - 1)];
      out__.write_free_lb(0, sd_def_a);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_0", "home", "att_h", "att_a",
                "def_h", "def_a", "sd_att_h", "sd_att_a", "sd_def_h",
                "sd_def_a"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y1_pred", "y2_pred", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(nteams)},
                std::vector<size_t>{static_cast<size_t>(nteams)},
                std::vector<size_t>{static_cast<size_t>(nteams)},
                std::vector<size_t>{static_cast<size_t>(nteams)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(ngames)},
             std::vector<size_t>{static_cast<size_t>(ngames)},
             std::vector<size_t>{static_cast<size_t>(ngames)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "home");
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "att_h" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "att_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "def_h" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "def_a" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sd_att_h");
    param_names__.emplace_back(std::string() + "sd_att_a");
    param_names__.emplace_back(std::string() + "sd_def_h");
    param_names__.emplace_back(std::string() + "sd_def_a");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "y2_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "beta_0");
    param_names__.emplace_back(std::string() + "home");
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "att_h" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "att_a" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "def_h" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nteams; ++sym1__) {
      param_names__.emplace_back(std::string() + "def_a" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sd_att_h");
    param_names__.emplace_back(std::string() + "sd_att_a");
    param_names__.emplace_back(std::string() + "sd_def_h");
    param_names__.emplace_back(std::string() + "sd_def_a");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "y1_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "y2_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= ngames; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att_h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"att_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"def_h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"def_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"sd_att_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_att_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ngames) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ngames) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ngames) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"home\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"att_h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"att_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"def_h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"def_a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nteams) + "},\"block\":\"parameters\"},{\"name\":\"sd_att_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_att_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_def_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y1_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ngames) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ngames) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ngames) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + 1) + nteams) + nteams) + nteams)
      + nteams) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((ngames +
      ngames) + ngames));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((1 + 1) + nteams) + nteams) + nteams)
      + nteams) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((ngames +
      ngames) + ngames));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_poisson_2_namespace::model_poisson_2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_poisson_2_namespace::profiles__;
}
#endif
#endif
